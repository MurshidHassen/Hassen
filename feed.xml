<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
<channel>
<title>Chris LaRose</title>
<description/>
<link>http://cjlarose.com</link>
<atom:link href="http://cjlarose.com/feed.xml" rel="self" type="application/rss+xml"/>
<item>
<title>
Tutorial: Handling users' passwords securely with Node.js using Argon2 and Express
</title>
<description>
<p>If you’ve decided that you need to store user passwords for your application, it’s important to take steps to store them securely. If you’re not familiar with password security at all, I recommend reading <a href="https://nakedsecurity.sophos.com/2013/11/20/serious-security-how-to-store-your-users-passwords-safely/">NakedSecurity’s post on the subject</a>. In it, Ducklin describes the motivation for using randomly-generated salts and a hash-based key stretching algorithm like <code class="highlighter-rouge">PBKDF2</code>, <code class="highlighter-rouge">scrypt</code>, or <code class="highlighter-rouge">bcrypt</code>.</p> <p>In 2013, Jean-Philippe Aumasson, principal cryptographer at Switzerland-based Kudelski Security, announced the <a href="https://password-hashing.net/">Password Hashing Competition (PHC)</a> as an open way to establish a new standard for password storage that would best protect against attackers. In July 2015, <a href="https://github.com/P-H-C/phc-winner-argon2">Argon2</a> emerged as the victor, and has since become the “first choice” recommendation for password hashing by the <a href="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet">Open Web Application Security Project (OWASP)</a>. OWASP recommends using <code class="highlighter-rouge">PBKDF2</code>, <code class="highlighter-rouge">scrypt</code>, or <code class="highlighter-rouge">bcrypt</code> if a decent Argon2 implementation doesn’t exist in your programming language.</p> <h2 id="using-argon2-with-express">Using Argon2 with Express</h2> <p>Imagine we’re building a new web application using Express in Node.js and we’d like to use Argon2 to safely store passwords.</p> <p>Let’s begin a new project from scratch.</p> <div class="highlighter-rouge"><pre class="highlight"><code>mkdir express-argon2-example cd express-argon2-example npm init </code></pre> </div> <p>Install Express and <a href="https://github.com/cjlarose/argon2-ffi">argon2-ffi</a>. Disclaimer: I’m the author of <code class="highlighter-rouge">argon2-ffi</code>.</p> <div class="highlighter-rouge"><pre class="highlight"><code>npm install --save express argon2-ffi </code></pre> </div> <p>Let’s just get a basic Express server up. Paste this example from the <a href="http://expressjs.com/en/starter/hello-world.html">Express Hello World page</a> into <code class="highlighter-rouge">server.js</code> at the root of your project.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">);</span> <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'Hello World!'</span><span class="p">);</span> <span class="p">});</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Example app listening on port 3000!'</span><span class="p">);</span> <span class="p">});</span> </code></pre> </div> <p>To make sure this works, execute <code class="highlighter-rouge">npm start</code>. You should see <code class="highlighter-rouge">Example app listening on port 3000!</code> printed to your console. If you visit <code class="highlighter-rouge">http://localhost:3000</code> in your browser, you should see a page that says “Hello World!” on it.</p> <p>Now that we’ve got a server up and running, let’s get into handling some passwords. There’s basically two parts we need to get working: There’s registration and then there’s logging in. We’ll handle registration first.</p> <h3 id="user-registration">User Registration</h3> <p>During registration, a user will provide a username and a password. We’ll verify that no existing user has the same username and validate that the password is sufficiently long. Then, we’ll compute the hash of the password using Argon2 and store the output. In a real-world application, you would probably store passwords in a database like PostgreSQL or MongoDB, but for the purpose of demonstration only, we’re just going to store our users in an in-memory JavaScript Object whose keys are usernames and whose values are password hashes.</p> <p>We’re going to replace the Hello World route with one for creating new users. But first, let’s install the Express middleware <a href="https://github.com/expressjs/body-parser">body-parser</a> so we can parse out JSON request bodies.</p> <div class="highlighter-rouge"><pre class="highlight"><code>npm install --save body-parser </code></pre> </div> <p>Now we can update <code class="highlighter-rouge">server.js</code> with the following:</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'crypto'</span><span class="p">);</span> <span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">);</span> <span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'body-parser'</span><span class="p">);</span> <span class="kd">var</span> <span class="nx">argon2i</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'argon2-ffi'</span><span class="p">).</span><span class="nx">argon2i</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span> <span class="kd">var</span> <span class="nx">jsonParser</span> <span class="o">=</span> <span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span> <span class="kd">var</span> <span class="nx">MIN_PASSWORD_LENGTH</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">MAX_PASSWORD_LENGTH</span> <span class="o">=</span> <span class="mi">160</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{};</span> <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'/users'</span><span class="p">,</span> <span class="nx">jsonParser</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">400</span><span class="p">);</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span> <span class="o">||</span> <span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="s1">'Missing username or password'</span><span class="p">);</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="nx">users</span><span class="p">[</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">409</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="s1">'A user with the specified username already exists'</span><span class="p">);</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">MIN_PASSWORD_LENGTH</span> <span class="o">||</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span> <span class="o">&gt;</span> <span class="nx">MAX_PASSWORD_LENGTH</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span> <span class="s1">'Password must be between '</span> <span class="o">+</span> <span class="nx">MIN_PASSWORD_LENGTH</span> <span class="o">+</span> <span class="s1">' and '</span> <span class="o">+</span> <span class="nx">MAX_PASSWORD_LENGTH</span> <span class="o">+</span> <span class="s1">' characters long'</span><span class="p">);</span> <span class="p">}</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">salt</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="nx">argon2i</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="nx">salt</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">hash</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="nx">users</span><span class="p">[</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hash</span><span class="p">;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">201</span><span class="p">);</span> <span class="p">});</span> <span class="p">});</span> <span class="p">});</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Example app listening on port 3000!'</span><span class="p">);</span> <span class="p">});</span> </code></pre> </div> <p>We can test this by sending in a request to <code class="highlighter-rouge">http://localhost:9000/users</code> with a JSON body containing <code class="highlighter-rouge">username</code> and <code class="highlighter-rouge">password</code> keys. I like to use <a href="https://www.getpostman.com/">Postman</a> for things like this, but you can do this from the command line with good ‘ole <code class="highlighter-rouge">curl</code>.</p> <div class="highlighter-rouge"><pre class="highlight"><code>curl -H "Content-Type: application/json" -X POST \ -d '{"username":"cjlarose","password":"supersecret"}' \ http://localhost:3000/users </code></pre> </div> <p>If you run this, you should see <code class="highlighter-rouge">Created</code> printed to the console. If you run it again, you’ll see <code class="highlighter-rouge">A user with the specified username already exists</code> printed instead.</p> <h3 id="handling-login">Handling Login</h3> <p>If you take a look at the output of <code class="highlighter-rouge">argon2i.hash</code>, it’ll look something like this:</p> <div class="highlighter-rouge"><pre class="highlight"><code>$argon2i$v=19$m=4096,t=3,p=1$BcemnsWZuevLbBkrUZ4dSg$n6RyfSTqOQpM0GAJ6PUebHxYfnAvk5ulSI+r71WOgYw </code></pre> </div> <p>This format is called <a href="http://pythonhosted.org/passlib/modular_crypt_format.html">Modular Crypt Format</a>. The string contains the algorithm (argon2i), the version number (19), the cost parameters (4096 KiB or memory, 3 iterations, and 1 thread), the salt, and finally, the result of hashing the salt and password. Conveniently, this is all the information we need to be able to verify the password when a user logs in.</p> <p>Let’s write a new route for our Express server that’ll take a username and password and check to make sure they are correct.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'/sessions'</span><span class="p">,</span> <span class="nx">jsonParser</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">encodedHash</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">username</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">400</span><span class="p">);</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span> <span class="o">||</span> <span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="s1">'Missing username or password'</span><span class="p">);</span> <span class="p">}</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span> <span class="nx">encodedHash</span> <span class="o">=</span> <span class="nx">users</span><span class="p">[</span><span class="nx">username</span><span class="p">];</span> <span class="k">if</span> <span class="p">(</span><span class="nx">encodedHash</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">401</span><span class="p">);</span> <span class="p">}</span> <span class="nx">argon2i</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">encodedHash</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">401</span><span class="p">);</span> <span class="p">}</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="s1">'Welcome '</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="s1">'!'</span><span class="p">);</span> <span class="p">});</span> <span class="p">});</span> </code></pre> </div> <p>We can test this by creating a new user as we did before, then trying to log in with the same credentials:</p> <div class="highlighter-rouge"><pre class="highlight"><code>curl -H "Content-Type: application/json" -X POST \ -d '{"username":"cjlarose","password":"supersecret"}' \ http://localhost:3000/users curl -H "Content-Type: application/json" -X POST \ -d '{"username":"cjlarose","password":"supersecret"}' \ http://localhost:3000/sessions </code></pre> </div> <p>You should see a nice welcome message printed to the console. We can see what happens if we use an incorrect password:</p> <div class="highlighter-rouge"><pre class="highlight"><code>curl -H "Content-Type: application/json" -X POST \ -d '{"username":"cjlarose","password":"incorrectpassword"}' \ http://localhost:3000/sessions </code></pre> </div> <p>You should see <code class="highlighter-rouge">Unauthorized</code> printed to the screen.</p> <h2 id="going-forward">Going forward</h2> <p>As time marches on, computer hardware will continue to improve and make it easier for attackers to crack passwords. This is why algorithms like <code class="highlighter-rouge">PBKDF2</code>, <code class="highlighter-rouge">scrypt</code>, and <code class="highlighter-rouge">bcrypt</code> are all configurable in the amount of resources they use. <code class="highlighter-rouge">PBKDF2</code> and <code class="highlighter-rouge">bcrypt</code> both allow an application to specify the number of iterations to perform and <code class="highlighter-rouge">scrypt</code> allows one to specify a parameter that increases both CPU cost and memory cost. Similarly, <code class="highlighter-rouge">argon2</code> allows you to specify an iteration count, a memory cost, and a degree of parallelism independently, and the <code class="highlighter-rouge">argon2-ffi</code> library <a href="https://github.com/cjlarose/argon2-ffi#hashing-a-password">exposes these options through a optional parameter</a>. The defaults are suitable for password hashing at the time of writing, but your application can increase them in the future if necessary.</p> <h2 id="thats-basically-it">That’s basically it!</h2> <p>Argon2 should be your first choice for password hashing in new projects. By using Node.js’s <code class="highlighter-rouge">crypto</code> module, we can generate a suitably random salt, and by using <code class="highlighter-rouge">argon2-ffi</code> we can easily and safely store passwords. My only other note is a reminder that if you’re sending passwords over the Web, make sure you’re using SSL/TLS to transmit that information, otherwise your users’ credentials are basically up for grabs by anyone on the same network.</p> <p>Be safe and have fun!</p>
</description>
<pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2016/03/29/argon2-ffi-express.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2016/03/29/argon2-ffi-express.html
</guid>
</item>
<item>
<title>A Makefile for OpenCL development</title>
<description>
<p>The <a href="https://developer.apple.com/library/mac/documentation/Performance/Conceptual/OpenCL_MacProgGuide/XCodeHelloWorld/XCodeHelloWorld.html">OpenCL Programming Guide for Mac</a> can get you up and running with OpenCL development with a build process integrated into Xcode. If you don’t want to depend on Xcode, here’s way to get your OpenCL workflow started with a good ‘ole Makefile.</p> <p>Like in Apple’s tutorial, assume you have a C file called <code class="highlighter-rouge">main.c</code> and an OpenCl kernel file called <code class="highlighter-rouge">mykernel.cl</code>. Here’s something to get you started:</p> <script src="https://gist.github.com/89de7d1d5863203dd30e.js"> </script> <p>Use <code class="highlighter-rouge">make</code> to generate your executable <code class="highlighter-rouge">main</code>, and <code class="highlighter-rouge">make clean</code> to get rid of all of the compiled files.</p> <p>One interesting thing in this Makefile in the inclusion of <code class="highlighter-rouge">.SUFFIXES:</code>. Without it, <code class="highlighter-rouge">make</code> will complain:</p> <div class="highlighter-rouge"><pre class="highlight"><code>make: Circular mykernel.cl &lt;- mykernel.cl.c dependency dropped. </code></pre> </div> <p>This is because <code class="highlighter-rouge">make</code> will include some <a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Rules.html">implicit rules</a> that we don’t want or need for our purposes.</p>
</description>
<pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2015/02/05/makefile-for-opencl-development.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2015/02/05/makefile-for-opencl-development.html
</guid>
</item>
<item>
<title>Show exceptions from Flux Dispatcher callbacks</title>
<description>
<p><a href="https://github.com/facebook/flux">Flux</a> is a frontend application architectural pattern by Facebook. Being an architectural pattern, it’s largely a do-it-yourself kind of deal. That is, except for an implementation of the Dispatcher, which is provided in the <a href="https://www.npmjs.org/package/flux"><code class="highlighter-rouge">flux</code></a> package on npm.</p> <p>The Dispatcher accepts callbacks with its <code class="highlighter-rouge">register</code> method, and invokes those callbacks anytime an action is <code class="highlighter-rouge">dispatch</code>ed to it. One curious behavior of the Dispatcher, though, is that it will eat any exception that occurs in a callback, and keep chugging along. Presumably, this is so that one failing callback doesn’t cause the whole application to blow up. It has the effect, though, of making debugging incredibly painful.</p> <p>Here’s how to get exceptions to show up in your console again, assuming you have a subclass of <code class="highlighter-rouge">Dispatcher</code> called <code class="highlighter-rouge">AppDispatcher</code>, as in the <a href="https://github.com/facebook/flux/blob/c858b918bf4dca1a116ff2ef8fe3e098ab2a9710/examples/flux-todomvc/js/dispatcher/AppDispatcher.js">TodoMVC example</a>. First, we’ll define a function that logs errors of the function it’s passed:</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">vomitify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">try</span> <span class="p">{</span> <span class="nx">f</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span> <span class="p">};</span> </code></pre> </div> <p><em>Note: Here, we reference the <code class="highlighter-rouge">console</code> object, which will fail spectacularly in older versions of IE when you don’t have the developer console open. Make sure you don’t run this in production, or if you do, make sure to <a href="http://stackoverflow.com/questions/1114187/is-it-a-bad-idea-to-leave-firebug-console-log-calls-in-your-producton-javascri">redefine console</a> safely.</em></p> <p>Now, we’ll override the <code class="highlighter-rouge">dispatch</code> method of <code class="highlighter-rouge">AppDispatcher</code> to use <code class="highlighter-rouge">vomitify</code>.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">Dispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'flux'</span><span class="p">).</span><span class="nx">Dispatcher</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">assign</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'object-assign'</span><span class="p">);</span> <span class="kd">var</span> <span class="nx">AppDispatcher</span> <span class="o">=</span> <span class="nx">assign</span><span class="p">(</span><span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">(),</span> <span class="p">{</span> <span class="na">handleViewAction</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">action</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">source</span><span class="p">:</span> <span class="s1">'VIEW_ACTION'</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="nx">action</span> <span class="p">});</span> <span class="p">},</span> <span class="na">handleServerAction</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">action</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">source</span><span class="p">:</span> <span class="s1">'SERVER_ACTION'</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="nx">action</span> <span class="p">});</span> <span class="p">},</span> <span class="na">register</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">Dispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">register</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">vomitify</span><span class="p">(</span><span class="nx">f</span><span class="p">));</span> <span class="p">}</span> <span class="p">});</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">AppDispatcher</span><span class="p">;</span> </code></pre> </div> <p>That’s it! Now your exceptions will be logged to the console again. Happy debugging!</p>
</description>
<pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2014/12/09/flux-show-exceptions.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2014/12/09/flux-show-exceptions.html
</guid>
</item>
<item>
<title>Run Docker in VirtualBox with Vagrant on Mac OS X</title>
<description>
<p><ins datetime="2014-10-16"><em>Update (Oct 16, 2014):</em> <a href="https://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/">Docker 1.3</a> and the corresponding update to <code class="highlighter-rouge">boot2docker</code> obsoletes this workaround by allowing you to mount directories directy from OS X to Docker containers.</ins></p> <p><a href="https://www.docker.io/">Docker</a> used to include a nice Vagrantfile, and this was the preferred way to run Docker on OS X. Since version <a href="https://github.com/dotcloud/docker/blob/master/CHANGELOG.md">0.8.1</a> (<a href="https://github.com/dotcloud/docker/pull/4281">PR #4281</a>), though, the Docker documentation refers Mac OS X users to <code class="highlighter-rouge">boot2docker</code>. <code class="highlighter-rouge">boot2docker</code> runs the Docker daemon in a <a href="https://www.virtualbox.org/">VirtualBox</a> VM, but the Docker client runs from the host Mac OS X machine. That’s super cool, and props to the Docker developers for getting that to all work. That said, I can’t stand it for doing any sort of application development because when you run <code class="highlighter-rouge">docker run -v</code>, host directories refer to the machine running the Docker daemon, not the client. This means that I can’t easily mount directories right from my Mac.</p> <p>I advocate instead running both the Docker client and server in a virtual machine in VirtualBox using <a href="http://www.vagrantup.com/">Vagrant</a>. If you haven’t done so already, download and install both <a href="https://www.virtualbox.org/">VirtualBox</a> and <a href="http://www.vagrantup.com/">Vagrant</a>. Vagrant uses a text file named <code class="highlighter-rouge">Vagrantfile</code> to configure new virtual machines. By default, Vagrant will synchronize the contents of the directory in which a <code class="highlighter-rouge">Vagrantfile</code> resides to the VM’s <code class="highlighter-rouge">/vagrant</code> directory. This is very helpful if you’d like to modify source files on your Mac with your favorite tools and run corresponding Docker containers on the VM. Here’s a <code class="highlighter-rouge">Vagrantfile</code> to get you started:</p> <div class="language-ruby highlighter-rouge"><pre class="highlight"><code><span class="c1"># -*- mode: ruby -*-</span> <span class="c1"># vi: set ft=ruby :</span> <span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">"2"</span> <span class="no">Vagrant</span><span class="p">.</span><span class="nf">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span> <span class="n">config</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">box</span> <span class="o">=</span> <span class="s2">"precise64"</span> <span class="n">config</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">box_url</span> <span class="o">=</span> <span class="s2">"http://files.vagrantup.com/precise64.box"</span> <span class="n">config</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">provision</span> <span class="s2">"docker"</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">49000</span><span class="p">.</span><span class="nf">.</span><span class="mi">49900</span> <span class="n">config</span><span class="p">.</span><span class="nf">vm</span><span class="p">.</span><span class="nf">network</span> <span class="s2">"forwarded_port"</span><span class="p">,</span> <span class="ss">guest: </span><span class="n">i</span><span class="p">,</span> <span class="ss">host: </span><span class="n">i</span> <span class="k">end</span> <span class="k">end</span> </code></pre> </div> <p>This specifies a new 64-bit Ubuntu 12.04 virtual machine with Docker and conveniently forwards all ports in the range <code class="highlighter-rouge">49000..49900</code> from the host to the virtual machine. That way, if you run a web server (for example) from your VM, you can open a web browser from your Mac and see your site.</p> <p>Then, we just start up the VM, establish an SSH connection with it, and start using Docker.</p> <div class="highlighter-rouge"><pre class="highlight"><code>Your-Mac:docker-vm$ vagrant up Your-Mac:docker-vm$ vagrant ssh vagrant@precise64:~$ docker ps </code></pre> </div> <p>Vagrant’s Docker Provisioner, by the way, can do some pretty neat tricks like building Docker images upon provisioning. Check out <a href="http://docs.vagrantup.com/v2/provisioning/docker.html">the docs</a>.</p>
</description>
<pubDate>Sat, 08 Mar 2014 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2014/03/08/run-docker-with-vagrant.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2014/03/08/run-docker-with-vagrant.html
</guid>
</item>
<item>
<title>
Django custom model field for storing version numbers
</title>
<description>
<p>Consider that you’d like to store version numbers like <code class="highlighter-rouge">v1.0</code>, <code class="highlighter-rouge">v2.0.3</code>, and <code class="highlighter-rouge">v5.4.3.2</code> in your Django application. One way to solve this problem is to store version numbers as strings, but the problem of sorting them becomes apparent: version <code class="highlighter-rouge">10.0</code> is more recent than version <code class="highlighter-rouge">2.0</code>, but compared lexicographically, <code class="highlighter-rouge">"10.0" &gt; "2.0"</code> evaluates to <code class="highlighter-rouge">False</code>. You can choose to implement sorting on the Python side of the query result, by splitting on the <code class="highlighter-rouge">.</code> character and comparing components left-to-right, but ideally, we’d like our DBMS to handle sorting for us.</p> <p>One way to fix the lexicographical sort problem is to zero-pad all components of the version: <code class="highlighter-rouge">"010.0" &gt; "002.0"</code> evaluates to <code class="highlighter-rouge">True</code> as we’d expect. This is fine solution, and even with just three places for each component, you can reach reasonably high version numbers. Additionally, you can store arbitrarily-long version numbers like <code class="highlighter-rouge">"001.002.003.004.005.006"</code>.</p> <p>The solution presented below takes another approach. Instead of storing version numbers as strings, we store them as 32-bit integers. We partition those 32 bits into four parts: major, minor, patch, and build. Using this scheme, we can unambiguously map any 4-part version number to a 32-bit integer. Unfortunately, this solution fixes the number of components you can represent in your version numbers, so this may not be the appropriate approach for your application.</p> <div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">VersionNumber</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span> <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">major</span><span class="p">,</span> <span class="n">minor</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">patch</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">build</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">major</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">minor</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">patch</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">build</span><span class="p">))</span> <span class="k">if</span> <span class="nb">any</span><span class="p">([</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">255</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">number</span><span class="p">]):</span> <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"Version number components must between 0 and 255,"</span> <span class="s">" inclusive"</span><span class="p">)</span> <span class="k">def</span> <span class="nf">__int__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="s">""" Maps a version number to a two's complement signed 32-bit integer by first calculating an unsigned 32-bit integer in the range [0,2**32-1], then subtracts 2**31 to get a number in the range [-2*31, 2**31-1]. """</span> <span class="n">major</span><span class="p">,</span> <span class="n">minor</span><span class="p">,</span> <span class="n">patch</span><span class="p">,</span> <span class="n">build</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">number</span> <span class="n">num</span> <span class="o">=</span> <span class="n">major</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span> <span class="o">|</span> <span class="n">minor</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span> <span class="o">|</span> <span class="n">patch</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">build</span> <span class="k">return</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span> <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="s">""" Pretty printing of version number; doesn't print 0's on the end """</span> <span class="n">end_index</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">part</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">number</span><span class="p">):</span> <span class="k">if</span> <span class="n">part</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">end_index</span> <span class="o">=</span> <span class="n">index</span> <span class="k">return</span> <span class="s">"."</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">number</span><span class="p">[:</span><span class="n">end_index</span><span class="o">+</span><span class="mi">1</span><span class="p">]])</span> <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">return</span> <span class="s">"&lt;</span><span class="si">%</span><span class="s">s.</span><span class="si">%</span><span class="s">s</span><span class="si">%</span><span class="s">s&gt;"</span> <span class="o">%</span> <span class="p">(</span> <span class="bp">self</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__module__</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">number</span><span class="p">)</span> <span class="p">)</span> </code></pre> </div> <p>In the <code class="highlighter-rouge">__int__</code> method of the <code class="highlighter-rouge">VersionNumber</code> class, we can see how the version number is mapped to an integer by using some bitwise arithmetic to store the major version in the highest 8 bits, the minor version in the next 8 bits, the patch in the next 8 bits, and the build number in the lowest 8 bits. Here, <code class="highlighter-rouge">__int__</code> will always return an <code class="highlighter-rouge">int</code> in the range <code class="highlighter-rouge">[-2147483648, 2147483647]</code>.</p> <div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">struct</span> <span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span> <span class="k">class</span> <span class="nc">VersionNumberField</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Field</span><span class="p">):</span> <span class="s">""" A version number. Stored as a integer. Retrieved as a VersionNumber. Like magic. Major, minor, patch, build must not exceed 255 """</span> <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">SubfieldBase</span> <span class="k">def</span> <span class="nf">get_internal_type</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">return</span> <span class="s">'IntegerField'</span> <span class="k">def</span> <span class="nf">to_python</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span> <span class="s">""" Convert a int to a VersionNumber """</span> <span class="k">if</span> <span class="n">value</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">VersionNumber</span><span class="p">):</span> <span class="k">return</span> <span class="n">value</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span> <span class="k">return</span> <span class="n">VersionNumber</span><span class="p">(</span><span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="n">part_bytes</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&gt;I"</span><span class="p">,</span> <span class="n">value</span> <span class="o">+</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span><span class="p">)</span> <span class="n">part_ints</span> <span class="o">=</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">part_bytes</span><span class="p">]</span> <span class="k">return</span> <span class="n">VersionNumber</span><span class="p">(</span><span class="o">*</span><span class="n">part_ints</span><span class="p">)</span> <span class="k">def</span> <span class="nf">get_prep_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span> <span class="s">""" Convert a VersionNumber or tuple to an int """</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">VersionNumber</span><span class="p">):</span> <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span> <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">VersionNumber</span><span class="p">(</span><span class="o">*</span><span class="n">value</span><span class="p">))</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span> <span class="k">return</span> <span class="n">value</span> <span class="k">def</span> <span class="nf">value_to_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span> <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_val_from_obj</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_prep_value</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> </code></pre> </div> <p>In <code class="highlighter-rouge">get_internal_type</code>, we return <code class="highlighter-rouge">IntegerField</code> so that Django’s ORM can pick the appropriate database type for storing our version numbers as integers. Something to take note of is that Django’s <a href="https://docs.djangoproject.com/en/1.6/ref/models/fields/#integerfield">IntegerField</a> supports <em>signed</em> 32-bit integers (from <code class="highlighter-rouge">-2147483648</code> to <code class="highlighter-rouge">2147483647</code>). This is why our <code class="highlighter-rouge">VersionNumber</code>’s <code class="highlighter-rouge">__int__</code> implementation returns integers in the same range.</p> <p>Then, to use <code class="highlighter-rouge">VersionNumberField</code> in your models:</p> <div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Program</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span> <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span> <span class="n">version_number</span> <span class="o">=</span> <span class="n">VersionNumberField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">VersionNumber</span><span class="p">(</span><span class="mi">1</span><span class="p">,))</span> </code></pre> </div> <p>So you can use your model like so:</p> <div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">programs.models</span> <span class="kn">import</span> <span class="n">VersionNumber</span><span class="p">,</span> <span class="n">Program</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Program</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"My Cool App"</span><span class="p">,</span> <span class="n">version_number</span><span class="o">=</span><span class="n">VersionNumber</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">save</span><span class="p">()</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">version_number</span> <span class="o">&lt;</span><span class="n">programs</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">VersionNumber</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">version_number</span><span class="p">)</span> <span class="s">'1.2.3'</span> </code></pre> </div> <p>Looking at all of these strange additions subtractions to <code class="highlighter-rouge">2**31</code>, it seems like it would be nice if Django provided an UnsignedIntegerField, but it doesn’t. You can <a href="http://stackoverflow.com/a/10678167/1231384">implement your own</a>, but the reason Django doesn’t do it is a good one: not all supported DBMSs have an unsigned integer type, PostgreSQL being among them.</p> <p>Our <code class="highlighter-rouge">VersionNumberField</code> can store version numbers from <code class="highlighter-rouge">0.0.0.0</code> to <code class="highlighter-rouge">255.255.255.255</code>. That range might look familiar because it’s the same range as IPv4 addresses. This of course, should come as no surprise because IPv4 addresses <em>are</em> 32-bit integers—we mere humans just prefer the dot-decimal notation. Out of curiosity, I took at look at Django’s (soon-to-be-deprecated) <a href="https://docs.djangoproject.com/en/1.6/ref/models/fields/#ipaddressfield">IPAddressField</a> to see if they do something similar. Turns out, they don’t. In <a href="https://github.com/django/django/blob/3bc0d46a840f17dce561daca8a6b8690b2cf5d0a/django/db/backends/mysql/creation.py#L23">MySQL</a> and <a href="https://github.com/django/django/blob/3bc0d46a840f17dce561daca8a6b8690b2cf5d0a/django/db/backends/sqlite3/creation.py#L26">SQLite</a>, Django uses a <code class="highlighter-rouge">char(15)</code> field. Similarly, Django uses a <code class="highlighter-rouge">VARCHAR2(15)</code> in <a href="https://github.com/django/django/blob/3bc0d46a840f17dce561daca8a6b8690b2cf5d0a/django/db/backends/oracle/creation.py#L36">Oracle</a>. In <a href="https://github.com/django/django/blob/3bc0d46a840f17dce561daca8a6b8690b2cf5d0a/django/db/backends/postgresql_psycopg2/creation.py#L24">PostgreSQL</a>, Django uses the <code class="highlighter-rouge">inet</code> field, which <a href="http://www.postgresql.org/docs/8.2/static/datatype-net-types.html">according to the documentation</a> stores both IPv4 and IPv6 host addresses with an optional netmask. It seems intuitive that storing IPv4 address as integers instead of as strings would save space as well as time on <code class="highlighter-rouge">ORDER BY</code> queries, so it’s a curious anecdote.</p>
</description>
<pubDate>Tue, 14 Jan 2014 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2014/01/14/django-custom-field-version-number.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2014/01/14/django-custom-field-version-number.html
</guid>
</item>
<item>
<title>
React beginner tutorial: implementing the board game Go
</title>
<description>
<p><a href="http://facebook.github.io/react/">React</a> is “a javascript library for building user interfaces”. If you haven’t done so already, I highly recommend you watch <a href="http://www.youtube.com/watch?v=x7cQ3mrcKaY">Pete Hunt’s presentation</a> on React’s design principles. React is a relatively simple library, especially when compared to full-fledged MVC frameworks like Angular, Ember, Backbone, and the rest. It’s a pleasure to work with, so let’s get started.</p> <p>Note: There’s code fragments sprinkled throughout this post. To see the source code for the final application, check out my <a href="https://github.com/cjlarose/react-go">Github repository</a>.</p> <p>Today, we’ll be implementing the board game <a href="http://en.wikipedia.org/wiki/Go_(game)">Go</a>. If you don’t know how to play, that’s okay. All you need to know for now is that players alternate placing stones on intersections of the board’s grid to capture their opponent’s stones and claim the greatest amount of territory. Take a look at the <a href="http://cjlarose.com/react-go">live preview</a> to get an idea of what we’ll be building.</p> <p>Let’s start with <code class="highlighter-rouge">index.html</code>.</p> <div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span> <span class="nt">&lt;html&gt;</span> <span class="nt">&lt;head&gt;</span> <span class="nt">&lt;title&gt;</span>React Go Tutorial<span class="nt">&lt;/title&gt;</span> <span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"style.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="nt">/&gt;</span> <span class="nt">&lt;/head&gt;</span> <span class="nt">&lt;body&gt;</span> <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"main"</span><span class="nt">&gt;</span> <span class="nt">&lt;/div&gt;</span> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdnjs.cloudflare.com/ajax/libs/react/0.8.0/react.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdnjs.cloudflare.com/ajax/libs/react/0.8.0/JSXTransformer.js"</span><span class="nt">&gt;&lt;/script&gt;</span> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js"</span><span class="nt">&gt;&lt;/script&gt;</span> <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"board.js"</span><span class="nt">&gt;&lt;/script&gt;</span> <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/jsx"</span> <span class="na">src=</span><span class="s">"go.js"</span><span class="nt">&gt;&lt;/script&gt;</span> <span class="nt">&lt;/body&gt;</span> <span class="nt">&lt;/html&gt;</span> </code></pre> </div> <p>There’s nothing too surprising here. Notice that we include <code class="highlighter-rouge">JSXTransformer.js</code>. This is React’s preprocessor. It allows us to use a special custom syntax to describe our React views that’s more akin to writing HTML than Javascript. While developing, relying on the client to preprocess your React files is fine, but when you go to production, make sure you <a href="http://facebook.github.io/react/docs/tooling-integration.html#jsx">precompile those assets</a>. Please note that the dependency above on <a href="http://underscorejs.org/">Underscore.js</a> isn’t necessary to build React apps, but I use it in my application logic because it provides some nice utility functions that Javascript doesn’t give us out of the box.</p> <h2 id="application-logic-first">Application logic first</h2> <p>Above, I include both <code class="highlighter-rouge">board.js</code> and <code class="highlighter-rouge">go.js</code>. <code class="highlighter-rouge">board.js</code> contains all of the game logic. It’s always a good idea to separate <em>application</em> logic from <em>presentation</em> logic, and React encourages this practice. Note that <code class="highlighter-rouge">board.js</code> has no dependency on React at all: it’s just vanilla Javascript that we know and love.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="cm">/* * board.js - Game logic for the board game Go */</span> <span class="kd">var</span> <span class="nx">Board</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">current_color</span> <span class="o">=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">BLACK</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="nx">size</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">create_board</span><span class="p">(</span><span class="nx">size</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">last_move_passed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">in_atari</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">attempted_suicide</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="p">};</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">BLACK</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">WHITE</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="cm">/* * Returns a size x size matrix with all entries initialized to Board.EMPTY */</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">create_board</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span><span class="p">;</span> <span class="p">}</span> <span class="k">return</span> <span class="nx">m</span><span class="p">;</span> <span class="p">};</span> <span class="cm">/* * Switches the current player */</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">switch_player</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">current_color</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">current_color</span> <span class="o">==</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">BLACK</span> <span class="p">?</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">WHITE</span> <span class="p">:</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">BLACK</span><span class="p">;</span> <span class="p">};</span> <span class="cm">/* * At any point in the game, a player can pass and let his opponent play */</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pass</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">last_move_passed</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">end_game</span><span class="p">();</span> <span class="k">this</span><span class="p">.</span><span class="nx">last_move_passed</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">switch_player</span><span class="p">();</span> <span class="p">};</span> <span class="cm">/* * Called when the game ends (both players passed) */</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">end_game</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"GAME OVER"</span><span class="p">);</span> <span class="p">};</span> <span class="cm">/* * Attempt to place a stone at (i,j). Returns true iff the move was legal */</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Played at "</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s2">", "</span> <span class="o">+</span> <span class="nx">j</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">attempted_suicide</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">in_atari</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">current_color</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">captured</span> <span class="o">=</span> <span class="p">[];</span> <span class="kd">var</span> <span class="nx">neighbors</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get_adjacent_intersections</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">);</span> <span class="kd">var</span> <span class="nx">atari</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">neighbors</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span> <span class="k">if</span> <span class="p">(</span><span class="nx">state</span> <span class="o">!=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span> <span class="o">&amp;&amp;</span> <span class="nx">state</span> <span class="o">!=</span> <span class="nx">color</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">group</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">get_group</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span> <span class="k">if</span> <span class="p">(</span><span class="nx">group</span><span class="p">[</span><span class="s2">"liberties"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">captured</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">group</span><span class="p">[</span><span class="s2">"liberties"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">atari</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span> <span class="p">});</span> <span class="c1">// detect suicide</span> <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">captured</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">get_group</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)[</span><span class="s2">"liberties"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">attempted_suicide</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">}</span> <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">captured</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">group</span><span class="p">)</span> <span class="p">{</span> <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">group</span><span class="p">[</span><span class="s2">"stones"</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stone</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">stone</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">stone</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span><span class="p">;</span> <span class="p">});</span> <span class="p">});</span> <span class="k">if</span> <span class="p">(</span><span class="nx">atari</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">in_atari</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">last_move_passed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">switch_player</span><span class="p">();</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">};</span> <span class="cm">/* * Given a board position, returns a list of [i,j] coordinates representing * orthagonally adjacent intersections */</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">get_adjacent_intersections</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span> <span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">neighbors</span> <span class="o">=</span> <span class="p">[];</span> <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">neighbors</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="p">]);</span> <span class="k">if</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">neighbors</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span> <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">neighbors</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="p">]);</span> <span class="k">if</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">neighbors</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">neighbors</span><span class="p">;</span> <span class="p">};</span> <span class="cm">/* * Performs a breadth-first search about an (i,j) position to find recursively * orthagonally adjacent stones of the same color (stones with which it shares * liberties). Returns null for if there is no stone at the specified position, * otherwise returns an object with two keys: "liberties", specifying the * number of liberties the group has, and "stones", the list of [i,j] * coordinates of the group's members. */</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">get_group</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span> <span class="k">if</span> <span class="p">(</span><span class="nx">color</span> <span class="o">==</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">visited</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// for O(1) lookups</span> <span class="kd">var</span> <span class="nx">visited_list</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// for returning</span> <span class="kd">var</span> <span class="nx">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">]];</span> <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span> <span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">stone</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span> <span class="k">if</span> <span class="p">(</span><span class="nx">visited</span><span class="p">[</span><span class="nx">stone</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">neighbors</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get_adjacent_intersections</span><span class="p">(</span><span class="nx">stone</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">stone</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">neighbors</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span> <span class="k">if</span> <span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span><span class="p">)</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">color</span><span class="p">)</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]]);</span> <span class="p">});</span> <span class="nx">visited</span><span class="p">[</span><span class="nx">stone</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="nx">visited_list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">stone</span><span class="p">);</span> <span class="p">}</span> <span class="k">return</span> <span class="p">{</span> <span class="s2">"liberties"</span><span class="p">:</span> <span class="nx">count</span><span class="p">,</span> <span class="s2">"stones"</span><span class="p">:</span> <span class="nx">visited_list</span> <span class="p">};</span> <span class="p">}</span> </code></pre> </div> <p>An instance of the <code class="highlighter-rouge">Board</code> class has several attributes that describe what a game of Go looks like at a particular moment in time. This is a common paradigm in React: get familiar with building models that have attributes that can be used by themselves to build your views. Let’s take a look at how a <code class="highlighter-rouge">Board</code> is represented.</p> <ul> <li><code class="highlighter-rouge">Board.size</code> stores an integer representing the dimensions of the game board. Go games are played on a square grid, typically consisting of 19x19 intersections, but beginners sometimes play on smaller 9x9 and 13x13 boards.</li> <li><code class="highlighter-rouge">Board.current_color</code> stores an integer that identifies whose turn it is. Because the player with the black stones plays first, we initialize <code class="highlighter-rouge">this.current_color</code> to <code class="highlighter-rouge">Board.BLACK</code>.</li> <li><code class="highlighter-rouge">Board.board</code> is an integer matrix that stores which color stones occupy which spaces. Because the board starts empty, we initialize every cell to <code class="highlighter-rouge">Board.EMPTY</code>.</li> <li>A game of Go ends when both players pass their turns consecutively. If a player passes his turn, we set <code class="highlighter-rouge">Board.last_move_passed</code> so that if the next move is also a pass, we can detect that the game has ended.</li> <li>When a player threatens his opponent, we set the flag <code class="highlighter-rouge">Board.in_atari</code> to true, so we can alert the player in danger. In Go, this is considered to be polite.</li> <li>Finally, we set the <code class="highlighter-rouge">Board.attempted_suicide</code> flag if a user made an invalid move — one that would mean suicide for their piece.</li> </ul> <h2 id="the-fun-part-building-react-components">The fun part: building React Components</h2> <p>Now we have a good representation of the board game in pure Javascript. We can use the methods <code class="highlighter-rouge">Board.pass()</code> and <code class="highlighter-rouge">Board.play(i, j)</code> to change the game’s state. All other methods are only used by the <code class="highlighter-rouge">Board</code> class internally. Let’s start putting our UI together with React.</p> <p>What follows is several segments of <code class="highlighter-rouge">go.js</code>, where we build our React components. To see the file in full, <a href="https://github.com/cjlarose/react-go/blob/master/go.js">check it out on Github</a>. We begin the file with a comment declaring that this file should be preprocessed by <a href="http://facebook.github.io/react/docs/tooling-integration.html#jsx">JSX</a>. Also, we create a constant called <code class="highlighter-rouge">GRID_SIZE</code>, which will store the pixel dimensions of a grid square on our game board.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="cm">/** @jsx React.DOM */</span> <span class="kd">var</span> <span class="nx">GRID_SIZE</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span> </code></pre> </div> <p>Next, let’s build out first React component. This one’s pretty simple. It represents a single grid intersection on the Go board.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">BoardIntersection</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span> <span class="na">handleClick</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">row</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">col</span><span class="p">))</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onPlay</span><span class="p">();</span> <span class="p">},</span> <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">style</span> <span class="o">=</span> <span class="p">{</span> <span class="na">top</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">row</span> <span class="o">*</span> <span class="nx">GRID_SIZE</span><span class="p">,</span> <span class="na">left</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">col</span> <span class="o">*</span> <span class="nx">GRID_SIZE</span> <span class="p">};</span> <span class="kd">var</span> <span class="nx">classes</span> <span class="o">=</span> <span class="s2">"intersection "</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">color</span> <span class="o">!=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">EMPTY</span><span class="p">)</span> <span class="nx">classes</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">color</span> <span class="o">==</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">BLACK</span> <span class="p">?</span> <span class="s2">"black"</span> <span class="p">:</span> <span class="s2">"white"</span><span class="p">;</span> <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">classes</span><span class="p">}</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">style</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt; </span> <span class="p">);</span> <span class="p">}</span> <span class="p">});</span> </code></pre> </div> <p>BoardIntersection has several properties that we can pass when we initialize an instance:</p> <ul> <li><code class="highlighter-rouge">BoardIntersection.board</code> is the instance of <code class="highlighter-rouge">Board</code> we’re representing.</li> <li><code class="highlighter-rouge">BoardIntersection.color</code> represents which color stone, if any, occupies this intersection.</li> <li><code class="highlighter-rouge">BoardIntersection.row</code> and <code class="highlighter-rouge">BoardIntersection.col</code> represent the <code class="highlighter-rouge">(i,j)</code> position of this intersection.</li> <li><code class="highlighter-rouge">BoardIntersection.onPlay</code> is a function we’ll pass in that we want to be executed whenever a move is executed on the game <code class="highlighter-rouge">Board</code>. We’ll call this function whenever a player clicks on the intersection.</li> </ul> <p>Next, let’s build the Component that represents the game board.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">BoardView</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span> <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">intersections</span> <span class="o">=</span> <span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="nx">intersections</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">BoardIntersection</span><span class="p">({</span> <span class="na">board</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="na">row</span><span class="p">:</span> <span class="nx">i</span><span class="p">,</span> <span class="na">col</span><span class="p">:</span> <span class="nx">j</span><span class="p">,</span> <span class="na">onPlay</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onPlay</span> <span class="p">}));</span> <span class="kd">var</span> <span class="nx">style</span> <span class="o">=</span> <span class="p">{</span> <span class="na">width</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">size</span> <span class="o">*</span> <span class="nx">GRID_SIZE</span><span class="p">,</span> <span class="na">height</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">size</span> <span class="o">*</span> <span class="nx">GRID_SIZE</span> <span class="p">};</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">style</span><span class="p">}</span> <span class="nx">id</span><span class="o">=</span><span class="s2">"board"</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">intersections</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">; </span> <span class="p">}</span> <span class="p">});</span> </code></pre> </div> <p>BoardView has only two properties we’ll use: <code class="highlighter-rouge">BoardView.board</code> and <code class="highlighter-rouge">BoardView.onPlay</code>. These properties play the same roles here as they did in <code class="highlighter-rouge">BoardIntersection</code>. In the <code class="highlighter-rouge">render</code> method of this Component, we create n x n instances of <code class="highlighter-rouge">BoardIntersection</code> and add them each in as children.</p> <p>Next, we create a few more components: one to display alert messages and another that provides a button to pass your turn.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">AlertView</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span> <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">in_atari</span><span class="p">)</span> <span class="nx">text</span> <span class="o">=</span> <span class="s2">"ATARI!"</span><span class="p">;</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">attempted_suicide</span><span class="p">)</span> <span class="nx">text</span> <span class="o">=</span> <span class="s2">"SUICIDE!"</span><span class="p">;</span> <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">"alerts"</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt; </span> <span class="p">);</span> <span class="p">}</span> <span class="p">});</span> <span class="kd">var</span> <span class="nx">PassView</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span> <span class="na">handleClick</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">pass</span><span class="p">();</span> <span class="p">},</span> <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">id</span><span class="o">=</span><span class="s2">"pass-btn"</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"button"</span> <span class="nx">value</span><span class="o">=</span><span class="s2">"Pass"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt; </span> <span class="p">);</span> <span class="p">}</span> <span class="p">});</span> </code></pre> </div> <p>Finally, we build a component to wrap all of our sub-Components up. We initialize an instance of our model, and call <code class="highlighter-rouge">React.renderComponent</code> to bind a Component to a DOM element.</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ContainerView</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span> <span class="na">getInitialState</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">{</span><span class="s1">'board'</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">};</span> <span class="p">},</span> <span class="na">onBoardUpdate</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="s2">"board"</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">board</span><span class="p">});</span> <span class="p">},</span> <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">AlertView</span> <span class="nx">board</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">board</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt; </span> <span class="o">&lt;</span><span class="nx">PassView</span> <span class="nx">board</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">board</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt; </span> <span class="o">&lt;</span><span class="nx">BoardView</span> <span class="nx">board</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">board</span><span class="p">}</span> <span class="nx">onPlay</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onBoardUpdate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span> <span class="sr">/</span><span class="err">&gt; </span> <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt; </span> <span class="p">)</span> <span class="p">}</span> <span class="p">});</span> <span class="kd">var</span> <span class="nx">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Board</span><span class="p">(</span><span class="mi">19</span><span class="p">);</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span> <span class="o">&lt;</span><span class="nx">ContainerView</span> <span class="nx">board</span><span class="o">=</span><span class="p">{</span><span class="nx">board</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">, </span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">'main'</span><span class="p">)</span> <span class="p">);</span> </code></pre> </div> <p>The <code class="highlighter-rouge">ContainerView</code> is our only stateful Component. It has exactly one property of its state: <code class="highlighter-rouge">board</code>, which is initialized to the <code class="highlighter-rouge">board</code> passed to it via its <code class="highlighter-rouge">props</code>. We pass a callback function called <code class="highlighter-rouge">this.onBoardUpdate</code> to the <code class="highlighter-rouge">BoardView</code>, so we can be notified when the board has changed.</p> <h2 id="how-it-all-works">How it all works</h2> <p>In the <code class="highlighter-rouge">onBoardUpdate</code> callback, we call <code class="highlighter-rouge">this.setState</code>, which notifies React that our model has changed, and React should then re-render our component so that it reflects the current model state. This is where the magic of React comes in: we can naively pretend that every time we call <code class="highlighter-rouge">this.setState</code>, React replaces our DOM element with whatever was returned by our Component’s <code class="highlighter-rouge">render</code> method. In practice, this is all you have to know, and for the most part, we can go on happily thinking in this way.</p> <p>In practice, it’s much too expensive to actually do all of that DOM manipulation every time the application state changes. So behind the scenes, React actually computes the minimal set of changes in the virtual DOM representation returned by a Component’s <code class="highlighter-rouge">render</code> method each time <code class="highlighter-rouge">setState</code> is called, then performs only those updates. In our case, that usually just means changing a single class name of a <code class="highlighter-rouge">&lt;div&gt;</code> that represents a board intersection, or possibly several, if you capture your opponent’s stones.</p> <p>React simplifies the process of writing application UIs because we don’t have to think about how our model changes over time and how our view responds incrementally, all while incurring only marginal performance penalty. It’s really a pleasure to work with, and I hope that it gains traction and sets a paradigm moving forward in the Javascript MVC scene.</p>
</description>
<pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2014/01/09/react-board-game-tutorial.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2014/01/09/react-board-game-tutorial.html
</guid>
</item>
<item>
<title>
PostgreSQL: Convert numeric IP address field to INET field
</title>
<description>
<p>Recall that an IPv4 address can be represented as a 32-bit integer. In many RDBMSs, this means that a 10-digit numeric field is sufficient. In this case, your application would have to handle the conversion from integer to strings like “127.0.0.1” and back again for <code class="highlighter-rouge">INSERT</code> and <code class="highlighter-rouge">UPDATE</code> operations. But if you’re using PostgreSQL, you can use the <code class="highlighter-rouge">inet</code> field and have the string conversion handled automagically and your heart can rest easy knowing that the address is stored efficiently.</p> <p>In my case, after a migration from MySQL, I ended up with a <code class="highlighter-rouge">numeric(10)</code> field and I wanted to convert it to a <code class="highlighter-rouge">inet</code> field. Here’s how I did it:</p> <div class="language-sql highlighter-rouge"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">my_table</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="n">ip_address</span> <span class="k">TYPE</span> <span class="n">inet</span> <span class="k">USING</span> <span class="s1">'0.0.0.0'</span><span class="p">::</span><span class="n">inet</span> <span class="o">+</span> <span class="n">ip_address</span><span class="p">::</span><span class="n">bigint</span><span class="p">;</span> </code></pre> </div> <p>There is no conversion defined from <code class="highlighter-rouge">numeric</code> to <code class="highlighter-rouge">inet</code>, so <code class="highlighter-rouge">ip_address::inet</code> would fail. So here we take advantage of addition being defined for <code class="highlighter-rouge">inet</code> and <code class="highlighter-rouge">bigint</code> operands to accomplish the conversion.</p>
</description>
<pubDate>Fri, 26 Apr 2013 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2013/04/26/postgresql-convert-numeric-ip-address-field-to-inet-field.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2013/04/26/postgresql-convert-numeric-ip-address-field-to-inet-field.html
</guid>
</item>
<item>
<title>
Externalizing Backbone.js templates into separate files
</title>
<description>
<p>So plenty of the <a href="http://backbonejs.org/">Backbone.js</a> tutorials ask you to define your <a href="http://underscorejs.org/#template">Underscore templates</a> within &lt;script&gt; tags. For example, Thomas Davis shows this template in <a href="http://backbonetutorials.com/what-is-a-view/">his tutorial</a>:</p> <div class="language-erb highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/template"</span> <span class="na">id=</span><span class="s">"search_template"</span><span class="nt">&gt;</span><span class="err"> &lt;!-- Access template variables with </span><span class="cp">&lt;%=</span> <span class="cp">%&gt;</span><span class="err"> --&gt; &lt;label&gt;</span><span class="cp">&lt;%=</span> <span class="n">search_label</span> <span class="cp">%&gt;</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt; </span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"text"</span> <span class="nx">id</span><span class="o">=</span><span class="s2">"search_input"</span> <span class="o">/&gt;</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"button"</span> <span class="nx">id</span><span class="o">=</span><span class="s2">"search_button"</span> <span class="nx">value</span><span class="o">=</span><span class="s2">"Search"</span> <span class="o">/&gt;</span> <span class="nt">&lt;/script&gt;</span> </code></pre> </div> <p>This is handy for small apps and for just learning to work with Backbone.js. But if you think it’s ugly, you’re not alone. They’re not just ugly, though. Consider initializing your Backbone views with something like:</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="na">template</span><span class="p">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">'#search_template'</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span> <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="s2">"search_label"</span><span class="p">:</span> <span class="s2">"some label"</span><span class="p">}));</span> <span class="p">}</span> <span class="c1">// blah, blah, blah</span> <span class="p">});</span> </code></pre> </div> <p>This means that if you want to initialize your views like this, you’d have to wait until after the DOMContentLoaded event to fire to ensure that $(‘#search_template’) actually gets that element. Maybe that’s not a big deal to you. But editing a super long HTML file with a bunch of hacky &lt;script&gt; elements is not a fun development workflow. That’s lame. We can do better.</p> <p><a href="http://coenraets.org/blog/2012/01/backbone-js-lessons-learned-and-improved-sample-app/">Some</a> recommend putting those templates into separate .html files and getting them all via AJAX. That’s really nice for workflow, but it’s really expensive if you have a lot of templates. We can do better, still. Rico Sta Cruz <a href="http://ricostacruz.com/backbone-patterns/#jst_templates">recommends using JST Templates</a>. This means that you define your templates in separate files on the server, and your server-side code takes care of putting it all together into a single JavaScript file. This is ideal, in my opinion, for most projects. And if you’re using Rails, <a href="http://embeddedjs.com/">EJS</a> will do the heavy lifting for you.</p> <p>But if you’re not using Rails, you might want to roll your own solution. Maybe you’re running a Django app. Let’s write a view function that will return a dynamically-generated JavaScript file that includes all of our Underscore templates.</p> <div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">Context</span> <span class="kn">from</span> <span class="nn">django.template.loader</span> <span class="kn">import</span> <span class="n">get_template</span> <span class="k">def</span> <span class="nf">compile_templates</span><span class="p">:</span> <span class="n">template</span> <span class="o">=</span> <span class="n">get_template</span><span class="p">(</span><span class="s">"templates.js"</span><span class="p">)</span> <span class="n">templates_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">root_dir</span><span class="p">,</span> <span class="s">'static'</span><span class="p">,</span> <span class="s">'js'</span><span class="p">,</span> <span class="s">'templates'</span><span class="p">)</span> <span class="n">template_dict</span> <span class="o">=</span> <span class="p">[]</span> <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">templates_path</span><span class="p">):</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span> <span class="n">fullpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="n">name</span><span class="p">,</span> <span class="n">ext</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">fullpath</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="n">output</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span> <span class="n">template_dict</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">output</span> <span class="n">context</span> <span class="o">=</span> <span class="n">Context</span><span class="p">({</span><span class="s">"templates"</span><span class="p">:</span> <span class="n">template_dict</span><span class="p">})</span> <span class="k">return</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span> </code></pre> </div> <p>Your corresponding templates.js template might look something like:</p> <div class="highlighter-rouge"><pre class="highlight"><code>App.Templates = {} {% for name, text in templates.items %} App.Templates["{{ name }}"] = "{{ text|escapejs }}"; {% endfor %} </code></pre> </div> <p>Note: Don’t do this in a production environment. I/O operations are slow. When you transition to a production environment, you should serve a copy of this file that’s been pregenerated. Anyways, this view gives you an associative array of your templates. So you can define your templates like this:</p> <div class="language-erb highlighter-rouge"><pre class="highlight"><code><span class="c">&lt;!-- static/js/templates/search.html --&gt;</span> <span class="nt">&lt;label&gt;</span><span class="cp">&lt;%=</span> <span class="n">search_label</span> <span class="cp">%&gt;</span><span class="nt">&lt;/label&gt;</span> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"search_input"</span> <span class="nt">/&gt;</span> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">id=</span><span class="s">"search_button"</span> <span class="na">value=</span><span class="s">"Search"</span> <span class="nt">/&gt;</span> </code></pre> </div> <p>And your view like this:</p> <div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="na">template</span><span class="p">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">Templates</span><span class="p">[</span><span class="s1">'search'</span><span class="p">]),</span> <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="s2">"search_label"</span><span class="p">:</span> <span class="s2">"some label"</span><span class="p">}));</span> <span class="p">}</span> <span class="c1">// blah, blah, blah</span> <span class="p">});</span> </code></pre> </div> <p>I think the extra effort to serve your templates like this is worth the advantages in easing your development workflow. I hope you’ll think so, too.</p>
</description>
<pubDate>Wed, 12 Dec 2012 00:00:00 +0000</pubDate>
<link>
http://cjlarose.com/2012/12/12/externalizing-backbonejs-templates-into-separate-files.html
</link>
<guid isPermaLink="true">
http://cjlarose.com/2012/12/12/externalizing-backbonejs-templates-into-separate-files.html
</guid>
</item>
</channel>
</rss>